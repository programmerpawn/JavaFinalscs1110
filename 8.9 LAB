Libary.java
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.IOException;

public class Library {
   
   public static void fillLibraries(LinkedListLibrary linkedListLibrary, ArrayListLibrary arrayListLibrary) throws IOException {
      FileInputStream fileByteStream = null; // File input stream
      Scanner inFS = null;                   // Scanner object
      int linkedListOperations = 0;
      int arrayListOperations = 0;
      
      BookNode currNode;
      Book tempBook;
      
      String bookTitle;
      String bookAuthor;
      long bookISBN;
      
      // Try to open file
      fileByteStream = new FileInputStream("Books.txt");
      inFS = new Scanner(fileByteStream);

      while (inFS.hasNextLine()) {
         bookTitle = inFS.nextLine();
         bookISBN = inFS.nextLong();
         inFS.nextLine();
         bookAuthor = inFS.nextLine();
         
         // Insert into linked list
         currNode = new BookNode(bookTitle, bookAuthor, bookISBN);
         linkedListOperations = linkedListLibrary.insertSorted(currNode, linkedListOperations);
         linkedListLibrary.lastNode = currNode;
         
         // Insert into ArrayList
         tempBook = new Book(bookTitle, bookAuthor, bookISBN);
         arrayListOperations = arrayListLibrary.insertSorted(tempBook, arrayListOperations);
      }
      
      fileByteStream.close(); // close() may throw IOException if fails
   }
       
   public static void main (String[] args) throws IOException {
      Scanner scnr = new Scanner(System.in);
      int linkedListOperations = 0;
      int arrayListOperations = 0;
      
      // Create libraries
      LinkedListLibrary linkedListLibrary = new LinkedListLibrary();
      ArrayListLibrary arrayListLibrary = new ArrayListLibrary();
      
      // Fill libraries with 100 books
      fillLibraries(linkedListLibrary, arrayListLibrary);
      
      // Create new book to insert into libraries
      BookNode currNode;
      Book tempBook;
      
      String bookTitle;
      String bookAuthor;
      long bookISBN;
      
      bookTitle = scnr.nextLine();
      bookISBN = scnr.nextLong();
      scnr.nextLine();
      bookAuthor = scnr.nextLine();
       
      // Insert into linked list
      currNode = new BookNode(bookTitle, bookAuthor, bookISBN);
      // TODO: Call LL_Library's insertSorted() method to insert currNode and return
      //       the number of operations performed
      linkedListOperations = linkedListLibrary.insertSorted(currNode, linkedListOperations);
      
      linkedListLibrary.lastNode = currNode;
      
      // Insert into ArrayList
      tempBook = new Book(bookTitle, bookAuthor, bookISBN);
      // TODO: Call AL_Library's insertSorted() method to insert currNode and return
      //       the number of operations performed
      arrayListOperations = arrayListLibrary.insertSorted(tempBook, arrayListOperations);
      
      // TODO: Print number of operations for linked list
      System.out.println("Number of linked list operations: " + linkedListOperations);
      
      // TODO: Print number of operations for ArrayList
      System.out.println("Number of ArrayList operations: " + arrayListOperations);
      
   }
}

LinkingListLibrary.java
public class LinkedListLibrary {
   //Linked list nodes
   BookNode headNode;                                              
   BookNode lastNode;
   
   LinkedListLibrary() {
      // Front of nodes list                                                                         
      headNode = new BookNode();
      lastNode = headNode;
   }
   
   public int insertSorted(BookNode newNode, int counter) {
      BookNode currNode, nextNode;
  
      // Special case for head node
      if (headNode == null || headNode.getBookISBN() >= newNode.getBookISBN()) { 
         newNode.insertAfter(headNode);
         headNode = newNode; 
      } 
      else { 
         // Locate the node before insertion point
         currNode = headNode; 
  
         while (currNode.getNext() != null && currNode.getNext().getBookISBN() < newNode.getBookISBN()) {
            currNode = currNode.getNext();
         }
         newNode.setNext(currNode.getNext());
         currNode.insertAfter(newNode);
      } 
      
      ++counter;
      return counter;
   }
   
   public void printLibrary() {
      BookNode currNode;
         
      currNode = headNode.getNext();
      while (currNode != null) {
         currNode.printBookInfo();
         System.out.println();
         currNode = currNode.getNext();
      }
   }
}

BookNode.java
public class BookNode {
   private String bookTitle;
   private String bookAuthor;
   private long bookISBN;
   private BookNode nextNodePtr; // Reference to the next node                                   

   public BookNode() {
      bookTitle = "";
      bookAuthor = "";
      bookISBN = 0;
      nextNodePtr = null;
   }

   // Constructor                                                                                     
   public BookNode(String bookTitleInit, String bookAuthorInit, long bookISBNInit) {
      this.bookTitle = bookTitleInit;
      this.bookAuthor = bookAuthorInit;
      this.bookISBN = bookISBNInit;
      this.nextNodePtr = null;
   }

   // Constructor                                                                                     
   public BookNode(String bookTitleInit, String bookAuthorInit, long bookISBNInit, BookNode nextLoc) {
      this.bookTitle = bookTitleInit;
      this.bookAuthor = bookAuthorInit;
      this.bookISBN = bookISBNInit;
      this.nextNodePtr = nextLoc;
   }

   // insertAfter
   public void insertAfter(BookNode nodeLoc) {
      BookNode tmpNext;

      tmpNext = this.nextNodePtr;
      this.nextNodePtr = nodeLoc;
      nodeLoc.nextNodePtr = tmpNext;
   }
   
   //setNext
   public void setNext(BookNode nodeLoc) {
      this.nextNodePtr = nodeLoc;
   }
   
   // Get location pointed by nextNodePtr                                                             
   public BookNode getNext() {
      return this.nextNodePtr;
   }
   
   public long getBookISBN() {
      return this.bookISBN;
   }

    // Print book information
   public void printBookInfo() {
      System.out.println("Title: " + this.bookTitle);
      System.out.println("Author: " + this.bookAuthor);
      System.out.println("ISBN: " + this.bookISBN);
   }
}

ArrayListLibrary.java
import java.util.ArrayList;

public class ArrayListLibrary {
   // ArraryList library
   public ArrayList<Book> library; 
   
   public ArrayListLibrary() {
      library = new ArrayList<Book>();
   }
   
   public int insertSorted(Book newBook, int counter) {
      Book currBook;
      
      // Add an empty element at end of list
      library.add(null);
      
      // Loop through elements starting at the end
      for (int i = library.size() - 2; i >=0; --i) {
         currBook = library.get(i);
         
         // If the current book's ISBN is larger than newBook's ISBN, shift
         // the current book down 1, count shift operation
         if(currBook.getBookISBN() > newBook.getBookISBN()){
            library.set(i+1, currBook);
            ++counter;
         }
      
         // Otherwise, place newBook at the next location (empty slot),
         // count insert operation
         else {
            library.set(i+1, newBook);
            ++counter;
            return counter;
         }
      }
      
      // If we get to the top of the list, place newBook on top
      library.set(0, newBook);
      ++counter;
      
      return counter;
   }
   
   public void printLibrary() {
      for (int i = 0; i < library.size(); ++i) {
         library.get(i).printInfo();
         System.out.println();
      }
   } 
}

Book.java
public class Book{

   private String bookTitle;
   private String bookAuthor;
   private long bookISBN;

   public Book() {
   	bookTitle = "";
   	bookAuthor = "";
   	bookISBN = 0;
   }

   public Book(String userBookTitle, String userBookAuthor, long userBookISBN) {
   	bookTitle = userBookTitle;
   	bookAuthor = userBookAuthor;
   	bookISBN = userBookISBN;
   }
   
   public long getBookISBN() {
	   return bookISBN;
   }

   public void printInfo(){
   	System.out.println("Title: " + bookTitle);
      System.out.println("Author: " + bookAuthor);
      System.out.println("ISBN: " + bookISBN);
   }
}
